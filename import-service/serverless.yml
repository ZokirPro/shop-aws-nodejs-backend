service: import-service

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ${env:REGION, 'us-east-1'}
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: ${env:AWS_NODEJS_CONNECTION_REUSE_ENABLED,'1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:DeleteObject
        - s3:CopyObject
      Resource:
        - arn:aws:s3:::node-in-aws-s3
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
        - sqs:ListQueues
      Resource:
        - arn:aws:sqs:us-east-1:178256066802:catalogItemsQueue
    - Effect: Allow
      Action: lambda:InvokeFunction
      Resource: "*"

functions:
  importProductsFile:
    handler: src/functions/index.importProductsFile
    events:
      - http:
          path: /import
          method: get
          cors: true
          authorizer:
            name: basicAuthorizerTest
            arn: arn:aws:lambda:us-east-1:178256066802:function:auth-service-dev-basicAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: src/functions/index.importFileParser
    events:
      - s3:
          bucket: node-in-aws-s3
          event: s3:ObjectCreated:*
          existing: true
          forceDeploy: true
          rules:
            - prefix: uploaded/
              suffix: .csv

plugins:
  - serverless-esbuild
  - serverless-offline-sqs
  - serverless-offline

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: aws-sdk
    target: node14
    platform: node
    concurrency: 10
  serverless-offline:
    allowCache: true
    noTimeOut: true
    httpPort: 4000
    lambdaPort: 4002
  useDotEnv: true

package:
  individually: true
